{"version":3,"sources":["modules/select/constants.ts","modules/select/actionTypes.ts","modules/analyze/services/span.ts","shared/rect.ts","modules/analyze/services/materialGroupData.ts","modules/analyze/services/str.ts","modules/analyze/actionTypes.ts","modules/analyze/constants.ts","modules/analyze/selectors.ts","shared/utils.ts","modules/analyze/actions.ts","modules/analyze/reducer.ts","modules/analyze/components/DataGuardHOC.tsx","shared/ShowHOC.tsx","modules/analyze/index.ts","modules/display/actionTypes.ts","modules/display/constants.ts","modules/display/selectors.ts","modules/display/actions.ts","modules/display/components/PDFDocument/PDFDocument.tsx","modules/display/components/PDFUpload.tsx","modules/display/components/NavigationButtons.tsx","modules/display/components/ShowMaterialButton.tsx","modules/display/components/PageChooser/PageChooser.tsx","modules/display/reducer.ts","modules/display/index.ts","modules/select/selectors.ts","modules/select/actions.ts","modules/select/services/updateSelectionGroup.ts","modules/select/components/WordLayer.tsx","modules/select/components/DocumentCanvas.tsx","modules/select/components/SelectionTypeButton.tsx","modules/select/reducer.ts","modules/select/index.ts","modules/control/hooks/useEventListener.tsx","modules/focus/constants.ts","modules/focus/actionTypes.ts","modules/focus/selectors.ts","modules/focus/actions.ts","modules/focus/reducer.ts","modules/focus/index.ts","modules/creation/constants.ts","modules/creation/actionTypes.ts","modules/cards/services/config.ts","modules/cards/constants.ts","modules/cards/actionTypes.ts","modules/cards/selectors.ts","modules/cards/actions.ts","modules/cards/reducer.ts","modules/cards/index.ts","modules/creation/actions.ts","modules/creation/reducer.ts","modules/river/constants.ts","modules/river/selectors.ts","modules/river/components/HybridCardField.tsx","modules/river/components/Card.tsx","modules/river/components/CardRiver.tsx","modules/river/actionTypes.ts","modules/river/components/ShowRiverButton.tsx","modules/river/actions.ts","modules/river/reducer.ts","modules/river/index.ts","modules/creation/selectors.ts","modules/creation/components/ContextMenu.tsx","modules/creation/utils.ts","modules/creation/index.ts","modules/control/services/keyboardControl.ts","modules/control/components/Control.tsx","modules/control/services/mouseControl.ts","modules/control/components/ControlBar.tsx","modules/control/index.ts","scenes/ReaderScene.tsx","store.ts","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["NAME","SECTION_UPDATE","SECTION_STATE","SELECTION_TYPE","SELECTED_STRING","expandSpan","span","rect","getBoundingClientRect","rectHeight","bottom","y","isDistHigherThanFirstHeight","rect2","firstHeight","Math","abs","rectsYDist","materialGroupData","container","spans","Array","from","querySelectorAll","length","expandedSpans","groupingComparator","previousSpan","groups","index","currentSpan","push","groupExpandedSpans","exSpan","expSpan2","groupExpandedSpansAccordingToHeightDiff","sort","exSpan2","sortExpandedSpansAccordingToY","map","expandSpans","group","x","sortExpandedSpansAccordingToX","boundingRects","splitExpandedSpans","reduce","prev","cur","materialSpanGroups","materialBoundingRectGroups","materialWordGroups","result","textNode","childNodes","textContent","possiblyWords","split","startOffset","endOffset","word","range","document","createRange","setStart","setEnd","spanToWordRanges","materialWordSelectionGroups","words","_","MATERIAL_DATA","SELECTION_UPDATE","getAll","state","getTimeStamp","createSelector","materialDataTimeStamp","getWordSelectionGroups","getWordRangeGroups","getMaterialSpanGroups","getMaterialBoundingRectGroups","getDataExists","timestamp","createDataConditionalSelector","realSelector","show","incrementer","counter","curCounter","tryInterval","tries","ms","func","increment","timeout","setInterval","clearInterval","captureMaterialData","documentRef","dispatch","getState","current","startTime","Date","now","curMaterialGroupData","payload","type","t","updateSelectionGroup","updatedSelectionGroup","sectionIndex","newSelectionGroups","initialState","Infinity","materialData","DataGuardHOC","Component","propsSelector","dispatchSelector","connect","InputComponent","props","actions","actionTypes","constants","reducer","selectors","components","PDF_UPLOADED","MATERIAL_LOADED","DISPLAY_STATUS","PAGE_UPDATE","getPDF","pdf","getRenderCritialData","currentPage","getTotalPages","totalPages","getCurrentPage","getPageControlData","getDocumentRef","getDisplayStatus","displayStatus","displayStatusIsShow","status","materialUploaded","event","files","target","materialLoaded","materialRendered","setPage","page","pageCorrections","newPage","movePage","nextPage","previousPage","toggleDisplayState","displayState","pdfjs","GlobalWorkerOptions","workerSrc","version","options","cMapUrl","cMapPacked","PDFDocumentContainer","analyze","parentSize","useDispatch","hasData","useSelector","file","onLoadSuccess","numPages","inputRef","onItemClick","pageNumber","parseInt","width","onRenderSuccess","forEach","layer","style","top","left","transform","PDFUploadContainer","onUpload","onChange","accept","PreviousButton","IconButton","onClick","NextButton","ShowMaterialButton","useState","outlined","setOutlined","nonDigitRegEx","PageChooser","error","value","toString","userInput","setState","Typography","variant","TextField","onKeyDown","key","preventDefault","submittedValue","possiblePage","trim","match","asInt","validatePageChoice","createRef","getSectionIndex","getUpdateAllowed","sectionUpdateAllowed","getSectionMovementState","sectionMovementState","getCurrentSpanGroup","spanGroups","getCurrentBoundingRectGroup","boundingRectGroups","getCurrentBoundingRect","getCurrentSelectionPosition","getCurrentSelectionGroup","selectionGroups","getCurrentWordRangeGroup","wordRangeGroups","getCurrentSelectedWordRanges","selectionGroup","wordRangeGroup","flatMap","rangeArr","lineIndex","filter","getManuallySelectedString","manuallySelectedString","getCurrentRangeArrStr","join","manualSelectionOccured","str","getCurrentSelectedString","manualSelection","dataExists","getSelectionType","selectionType","selectionTypeIsSection","getOverlayRelevantData","display","spanGroup","movementState","updateSelection","foundSpan","newSelectionGroup","oneIndex","indexOf","zeroIndex","lastIndexOf","reverse","toggleSectionMovementState","updateSection","updateType","lastIndex","updateSelectionType","toggleSelectionType","selectionTypeIsNotSection","updateManuallySelectedString","resetManuallySelectedString","BoundingRectRect","xOffset","yOffset","boundingRect","height","WordLayer","color","showRects","boundingRectRects","useMemo","flatWordRanges","flatSelectionGroup","containerRect","shadowBlur","stroke","opacity","val","wordRangesToRects","flat","useEffect","focus","scrollIntoView","behavior","block","inline","DocumentCanvasContainer","setHeight","useLayoutEffect","position","pointerEvents","zIndex","SelectionTypeButton","disableSectionUpdate","resetSectionSelection","useEventListener","eventName","handler","savedHandler","useRef","eventListener","addEventListener","removeEventListener","FOCUS_UPDATE","getFocus","updateFocus","tryUpdateFocus","toggleContextMenuFocus","TOGGLE_CONTEXT_MENU","CLOSE_CONTEXT_MENU","OPEN_CONTEXT_MENU","updateContentStrFunctions","REPLACE","newStr","APPEND","oldStr","creationFunctions","NOTE","oldConfig","partialUpdateFunction","content","Q","q","A","a","contentStringToConfig","contentStr","creationType","currentCard","createPartialUpdateContentStrFunction","CARD_UPDATE","CARD_PUSH","cards","getLastCardIDNumber","lastCardIDNumber","getCards","cardPush","cardPayload","card","cardID","cardUpdate","updateCardContent","contentString","riverID","config","pushCardContent","intialState","services","cardObj","toggleContextMenu","closeContextMenu","openContextMenu","triggerSelectionGrab","selectedString","select","undefined","open","menuRef","qaRefs","creationData","getRiverMakeUps","riverMakeUps","getActiveRiverMakeUpID","activeRiverMakeUpID","getActiveRiverMakeUp","makeUps","id","getActiveRiverCardIDs","makeUp","cardIDs","getActiveRiverCards","makeUpCardIDs","getRiverShowState","riverShowState","riverShowStateIsShow","HybridCardField","storeValue","saveChanges","rest","mutableValue","onBlur","NoteCard","fullWidth","label","backgroundColor","InputLabelProps","QACard","Grid","direction","spacing","item","Card","GridDivider","Divider","CardRiver","elevation","setElevation","riverCards","gridItems","arr","toCardGridItemsWithDividers","Accordion","defaultExpanded","onMouseEnter","onMouseLeave","AccordionSummary","AccordionDetails","justify","alignItems","RIVER_SHOW_STATE","ShowRiverButton","RiverMakeUp1","active","lastRiverIDNumber","riverMakeUp","getContextMenuState","getContextMenuRef","getContextMenuQARefs","getContextMenuInitData","river","NewQACard","MenuItem","NewNoteCard","SingleOptionItem","cardConfig","dispatchRiver","QAOptionItem","qaRef","parentMenuOpen","ref","CardConfigItem","ContextMenuContainer","dispatchRiverOne","partialRiverDispatch","qaRefIndex","Menu","keepMounted","anchorReference","anchorPosition","contextMenuContainsTargetNode","refObject","parentNode","querySelector","contains","utils","keyEventDispatcher","keyMap","action","pageControlKeyMap","ArrowLeft","ArrowRight","sectionControlKeyMap","ArrowDown","ArrowUp","selectionControlKeyMap","d","w","s","contextMenuControlKeyMap","creation","selectionFocusSectionDispatcher","selectionFocusMouseDispatcher","focusDispatcherMap","SELECTION","CONTEXT_MENU","EDITOR","CONTROL","ControlContainer","keyDownControl","userFocus","dispatcher","mouseDownControl","mouseUpControl","selection","getSelection","selectedStr","console","log","ControlBar","AppBar","Toolbar","ReaderSceneRiverColumn","Paper","ReaderSceneMaterialColumnWithSize","withSize","monitorHeight","noPlaceholder","size","ReaderScene","showMaterial","showRiver","control","rootReducer","combineReducers","enhancer","composeWithDevTools","stateSanitizer","newState","displayData","composeEnhancers","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.5d6a3ba7.chunk.js","sourcesContent":["export const NAME = \"selectionData\";\n","import { NAME } from \"./constants\";\n\nexport const SECTION_UPDATE = NAME + \"/SECTION_UPDATE\";\nexport const SECTION_STATE = NAME + \"/SECTION_STATE\";\nexport const SELECTION_TYPE = NAME + \"/SELCTION_TYPE\";\nexport const SELECTED_STRING = NAME + \"/SELECTED_STRING\";\n","import { strToWords } from \"./str\";\n\nexport const splitExpandedSpans = (expandedSpans: ExpandedSpan[]) => {\n\tconst spans = [];\n\tconst boundingRects = [];\n\n\tfor (const exSpan of expandedSpans) {\n\t\tspans.push(exSpan.span);\n\t\tboundingRects.push(exSpan.rect);\n\t}\n\n\treturn { spans, boundingRects };\n};\n\nexport const sortExpandedSpansAccordingToX = (expandedSpans: ExpandedSpan[]) =>\n\texpandedSpans.sort((exSpan, exSpan2) => exSpan.rect.x - exSpan2.rect.x);\n\nexport const sortExpandedSpansAccordingToY = (expandedSpans: ExpandedSpan[]) =>\n\texpandedSpans.sort((exSpan, exSpan2) => exSpan.rect.y - exSpan2.rect.y);\n\nexport type ExpandedSpanGroupingComparator = (expandSpan: ExpandedSpan, expandSpan2: ExpandedSpan) => boolean;\n\nexport const groupExpandedSpans = (\n\texpandedSpans: ExpandedSpan[],\n\tgroupingComparator: ExpandedSpanGroupingComparator\n) => {\n\t// depends on the spans being sorted according to grouping\n\n\tlet previousSpan = expandedSpans[0];\n\tconst groups = [[previousSpan]];\n\n\tfor (let index = 1; index < expandedSpans.length; index++) {\n\t\tconst currentSpan = expandedSpans[index];\n\t\t//new group\n\t\tif (groupingComparator(previousSpan, currentSpan)) groups.push([]);\n\t\tgroups[groups.length - 1].push(currentSpan);\n\t\tpreviousSpan = currentSpan;\n\t}\n\n\treturn groups;\n};\n\nexport type ExpandedSpan = { span: HTMLSpanElement; rect: DOMRect };\n\nexport const expandSpans = (spans: HTMLSpanElement[]) => spans.map(expandSpan);\n\nexport const expandSpan = (span: HTMLSpanElement): ExpandedSpan => {\n\treturn { span, rect: span.getBoundingClientRect() };\n};\n\nexport function spanToWordRanges(span: HTMLSpanElement) {\n\tconst result: Range[] = [];\n\n\t//node is needed for Range object\n\tconst textNode = span.childNodes[0];\n\tconst textContent = span.textContent;\n\n\tif (textContent) {\n\t\tconst possiblyWords = strToWords(textContent);\n\n\t\t//to create the Range objects we need the correct offset, otherwise it would be more straightforward parsing\n\t\tlet startOffset = 0;\n\t\tlet endOffset = 0;\n\n\t\tfor (const word of possiblyWords) {\n\t\t\tconst moreThanEmptySpace = word.length >= 1;\n\t\t\tif (moreThanEmptySpace) {\n\t\t\t\tendOffset += word.length;\n\n\t\t\t\tconst firstRange = result.length > 0;\n\t\t\t\t// offset is >= 1 because we split at \" \" and not \"\"\n\t\t\t\tif (firstRange) endOffset += 1;\n\n\t\t\t\tconst range = document.createRange();\n\n\t\t\t\trange.setStart(textNode, startOffset);\n\t\t\t\trange.setEnd(textNode, endOffset);\n\n\t\t\t\tresult.push(range);\n\n\t\t\t\tstartOffset += word.length + 1;\n\t\t\t} else {\n\t\t\t\t// if empty space, this means str started with empty space or ended with it, so need to move forward\n\t\t\t\tstartOffset += 1;\n\t\t\t\tendOffset += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n","export const rectHeight = (rect: DOMRect) => rect.bottom - rect.y;\n\nexport const rectsYDist = (rect: DOMRect, rect2: DOMRect) => Math.abs(rect.y - rect2.y);\n\nexport const isDistHigherThanFirstHeight = (rect: DOMRect, rect2: DOMRect) => {\n\t// assumes that the spans are directly beneath each other\n\t// and that the additional offset between y-left-top of spans (between text) is at most 0.5*height\n\tconst firstHeight = rectHeight(rect);\n\treturn rectsYDist(rect, rect2) > 1.5 * firstHeight;\n};\n","import { MaterialGroupData } from \"../model\";\nimport {\n\tspanToWordRanges,\n\texpandSpans,\n\tgroupExpandedSpans,\n\tsortExpandedSpansAccordingToY,\n\tsortExpandedSpansAccordingToX,\n\tExpandedSpan,\n\tsplitExpandedSpans,\n} from \"./span\";\nimport { isDistHigherThanFirstHeight } from \"../../../shared/rect\";\n\nconst groupExpandedSpansAccordingToHeightDiff = (expandedSpans: ExpandedSpan[]) =>\n\tgroupExpandedSpans(expandedSpans, (exSpan, expSpan2) => isDistHigherThanFirstHeight(exSpan.rect, expSpan2.rect));\n\nexport const materialGroupData = (container: HTMLDivElement): MaterialGroupData | null => {\n\t// assumes all spans inside the document are relevant (potentially multiple pages)\n\tconst spans = Array.from(container.querySelectorAll(\"span\"));\n\tif (spans.length === 0) return null;\n\n\tconst expandedSpans = sortExpandedSpansAccordingToY(expandSpans(spans));\n\tconst expandedSpanGroups = groupExpandedSpansAccordingToHeightDiff(expandedSpans).map((group) =>\n\t\tsortExpandedSpansAccordingToX(group)\n\t);\n\tconst splitGroups = expandedSpanGroups.map((group) => splitExpandedSpans(group));\n\tconst [materialSpanGroups, materialBoundingRectGroups] = splitGroups.reduce(\n\t\t(prev, cur) => {\n\t\t\t(prev[0] as HTMLSpanElement[][]).push(cur.spans);\n\t\t\t(prev[1] as DOMRect[][]).push(cur.boundingRects);\n\t\t\treturn prev;\n\t\t},\n\t\t[[], []]\n\t);\n\n\tconst materialWordGroups = (materialSpanGroups as HTMLSpanElement[][]).map((group) =>\n\t\tgroup.map((span) => spanToWordRanges(span))\n\t);\n\n\tconst materialWordSelectionGroups: (1 | 0)[][][] = materialWordGroups.map((group) =>\n\t\tgroup.map((words) => words.map((_) => 1))\n\t);\n\n\treturn {\n\t\tmaterialSpanGroups,\n\t\tmaterialBoundingRectGroups,\n\t\tmaterialWordGroups,\n\t\tmaterialWordSelectionGroups,\n\t};\n};\n","export const strToWords = (str: string) => str.split(\" \");\n","export const MATERIAL_DATA = \"analyze/MATERIAL_DATA\";\nexport const SELECTION_UPDATE = \"analyze/SELECTION_UPDATE\";\n","export const NAME = \"materialData\";\n","import { createSelector } from \"reselect\";\nimport { MaterialData, MaterialWordData, MaterialSpanData } from \"./model\";\nimport { NAME } from \"./constants\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getTimeStamp = createSelector(getAll, (state: MaterialData) => state.materialDataTimeStamp);\n\nexport const getWordSelectionGroups = createSelector(\n\tgetAll,\n\t(state: MaterialWordData) => state.materialWordSelectionGroups\n);\n\nexport const getWordRangeGroups = createSelector(getAll, (state: MaterialWordData) => state.materialWordGroups);\n\nexport const getMaterialSpanGroups = createSelector(getAll, (state: MaterialSpanData) => state.materialSpanGroups);\n\nexport const getMaterialBoundingRectGroups = createSelector(\n\tgetAll,\n\t(state: MaterialSpanData) => state.materialBoundingRectGroups\n);\n\nexport const getDataExists = createSelector(getTimeStamp, (timestamp) => timestamp > 0);\n\nexport const createDataConditionalSelector = (realSelector: (state: any) => any) => (state: any) =>\n\tgetDataExists(state) ? { ...realSelector(state), show: true } : {};\n","export const incrementer = () => {\n\tlet counter = 0;\n\treturn () => {\n\t\tconst curCounter = counter;\n\t\tcounter++;\n\t\treturn curCounter;\n\t};\n};\n","import { Dispatch } from \"redux\";\nimport { materialGroupData } from \"./services/materialGroupData\";\nimport * as t from \"./actionTypes\";\nimport { MaterialData } from \"./model\";\nimport { getTimeStamp, getWordSelectionGroups } from \"./selectors\";\nimport { RefObject } from \"react\";\nimport { incrementer } from \"../../shared/utils\";\n\nexport const tryInterval = (tries: number, ms: number, func: () => boolean) => {\n\tconst increment = incrementer();\n\tconst timeout = setInterval(() => {\n\t\tif (increment() > tries) {\n\t\t\tclearInterval(timeout);\n\t\t\treturn;\n\t\t}\n\n\t\tif (func()) clearInterval(timeout);\n\t}, ms);\n};\n\n// text-layer is not really guaranteed to be rendered on render \"success\",\n// so we use this ugly \"try ten times\" approach\nexport function captureMaterialData(documentRef: RefObject<any>) {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\t\tconst container = documentRef.current;\n\t\tif (container) {\n\t\t\t// TODO: still possibility of race-condition,\n\t\t\t// maybe check on each section update if the number is congruent and if not actualize?\n\t\t\t// TODO: make fluid movement for changing from non-existing section on new page to existing one\n\n\t\t\tconst startTime = Date.now();\n\n\t\t\t// try once before going into intervals (most times once should work)\n\t\t\tconst curMaterialGroupData = materialGroupData(container as HTMLDivElement);\n\t\t\tif (curMaterialGroupData && getTimeStamp(state) < startTime) {\n\t\t\t\tconst payload: MaterialData = {\n\t\t\t\t\t...curMaterialGroupData,\n\t\t\t\t\tmaterialDataTimeStamp: startTime,\n\t\t\t\t};\n\t\t\t\tdispatch({ type: t.MATERIAL_DATA, payload });\n\t\t\t} else {\n\t\t\t\ttryInterval(10, 20, () => {\n\t\t\t\t\tconst curMaterialGroupData = materialGroupData(container as HTMLDivElement);\n\t\t\t\t\tif (curMaterialGroupData && getTimeStamp(getState()) < startTime) {\n\t\t\t\t\t\tconst payload: MaterialData = {\n\t\t\t\t\t\t\t...curMaterialGroupData,\n\t\t\t\t\t\t\tmaterialDataTimeStamp: startTime,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdispatch({ type: t.MATERIAL_DATA, payload });\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport const updateSelectionGroup = (updatedSelectionGroup: (1 | 0)[][], sectionIndex: number) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\t\tconst newSelectionGroups = [...getWordSelectionGroups(state)];\n\t\tnewSelectionGroups[sectionIndex] = updatedSelectionGroup;\n\t\tdispatch({ type: t.SELECTION_UPDATE, payload: newSelectionGroups });\n\t};\n};\n","import * as t from \"./actionTypes\";\nimport { MaterialData } from \"./model\";\n\nconst initialState: MaterialData = { materialDataTimeStamp: -Infinity };\n\nconst materialData = (state = initialState, { type, payload }: { type: string; payload: any }): MaterialData => {\n\tswitch (type) {\n\t\tcase t.MATERIAL_DATA:\n\t\t\treturn payload;\n\t\tcase t.SELECTION_UPDATE:\n\t\t\treturn { ...state, materialWordSelectionGroups: payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default materialData;\n","import { FunctionComponent } from \"react\";\nimport { connect, ConnectedComponent } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { createDataConditionalSelector } from \"../selectors\";\nimport { ShowHOC } from \"../../../shared/ShowHOC\";\n\nexport const DataGuardHOC = (\n\tComponent: FunctionComponent<any>,\n\tpropsSelector: (state: any) => any,\n\tdispatchSelector?: (dispatch: Dispatch) => any\n): ConnectedComponent<(props: any) => JSX.Element | null, any> => {\n\t// renders null if data-selector returns {}\n\treturn connect(createDataConditionalSelector(propsSelector), dispatchSelector)(ShowHOC(Component));\n};\n","import React, { FunctionComponent } from \"react\";\n\nexport const ShowHOC = (InputComponent: FunctionComponent<any>) => {\n\treturn ({ show, ...props }: { show: boolean }) => {\n\t\treturn show ? <InputComponent {...props}></InputComponent> : null;\n\t};\n};\n","import * as actions from \"./actions\";\nimport * as constants from \"./constants\";\nimport * as actionTypes from \"./actionTypes\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\nimport * as components from \"./components\";\n\nexport default { actions, actionTypes, constants, reducer, selectors, components };\n","export const PDF_UPLOADED = \"display/PDF_UPLOADED\";\nexport const MATERIAL_LOADED = \"display/MATERIAL_LOADED\";\nexport const DISPLAY_STATUS = \"display/DISPLAY_STATUS\";\nexport const PAGE_UPDATE = \"display/PAGE_UPDATE\";\n","export const NAME = \"displayData\";\n","import { createSelector } from \"reselect\";\nimport { DisplayData } from \"./model\";\nimport { NAME } from \"./constants\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getPDF = createSelector(getAll, (state: DisplayData) => {\n\treturn { pdf: state.pdf };\n});\n\nexport const getRenderCritialData = createSelector(getAll, (state: DisplayData) => {\n\treturn {\n\t\tpdf: state.pdf,\n\t\tcurrentPage: state.currentPage,\n\t\tdocumentRef: state.documentRef,\n\t};\n});\n\nexport const getTotalPages = createSelector(getAll, (state: DisplayData) => state.totalPages);\n\nexport const getCurrentPage = createSelector(getAll, (state: DisplayData) => state.currentPage);\n\nexport const getPageControlData = createSelector(\n\tgetTotalPages,\n\tgetCurrentPage,\n\t(totalPages: number | undefined, currentPage: number) => {\n\t\treturn { currentPage, totalPages };\n\t}\n);\n\nexport const getDocumentRef = createSelector(getAll, (state: DisplayData) => state.documentRef);\n\nexport const getDisplayStatus = createSelector(getAll, (state: DisplayData) => state.displayStatus);\n\nexport const displayStatusIsShow = createSelector(getDisplayStatus, (status) => status === \"SHOW\");\n","import { ChangeEvent } from \"react\";\nimport { Dispatch } from \"redux\";\nimport * as t from \"./actionTypes\";\nimport { DisplayStatus, PageMove } from \"./model\";\nimport { getPageControlData, getDisplayStatus } from \"./selectors\";\n\nexport const materialUploaded = (event: ChangeEvent<HTMLInputElement>) => {\n\treturn (dispatch: Dispatch) => {\n\t\tconst files = event.target.files;\n\t\tconst pdf = files ? files[0] : null;\n\t\tif (pdf) dispatch({ type: t.PDF_UPLOADED, payload: pdf });\n\t};\n};\n\nexport const materialLoaded = (totalPages: number) => {\n\treturn { type: t.MATERIAL_LOADED, payload: totalPages };\n};\n\nexport const materialRendered = (): { type: string; payload: DisplayStatus } => {\n\treturn { type: t.DISPLAY_STATUS, payload: \"SHOW\" };\n};\n\n// assumes outside validation/correction\nexport const setPage = (page: number) => {\n\treturn { type: t.PAGE_UPDATE, payload: page };\n};\n\nconst pageCorrections = {\n\tADD: (newPage: number, totalPages: number) => (newPage === totalPages + 1 ? 1 : newPage),\n\tREMOVE: (newPage: number, totalPages: number) => (newPage === 0 ? totalPages : newPage),\n};\n\nexport const movePage = (type: PageMove) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst { currentPage, totalPages } = getPageControlData(getState());\n\t\tif (totalPages) {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"NEXT\":\n\t\t\t\t\tdispatch({ type: t.PAGE_UPDATE, payload: pageCorrections[\"ADD\"](currentPage + 1, totalPages) });\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"PREVIOUS\":\n\t\t\t\t\tdispatch({ type: t.PAGE_UPDATE, payload: pageCorrections[\"REMOVE\"](currentPage - 1, totalPages) });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n};\nexport const nextPage = () => movePage(\"NEXT\");\nexport const previousPage = () => movePage(\"PREVIOUS\");\n\nexport const toggleDisplayState = () => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst displayState = getDisplayStatus(getState()) === \"SHOW\" ? \"HIDE\" : \"SHOW\";\n\n\t\tdispatch({ type: t.DISPLAY_STATUS, payload: displayState });\n\t};\n};\n","import \"./PDFDocument.css\";\nimport \"./AnnotationLayer.css\";\nimport React, { RefObject } from \"react\";\nimport { pdfjs, Document, Page } from \"react-pdf\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { materialLoaded, materialRendered, setPage } from \"../../actions\";\nimport { getRenderCritialData } from \"../../selectors\";\nimport analyze from \"../../../analyze\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction removeTextLayerOffset() {\n\tconst textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\n\ttextLayers.forEach((layer) => {\n\t\tconst { style }: any = layer;\n\t\tstyle.top = \"0\";\n\t\tstyle.left = \"0\";\n\t\tstyle.transform = \"\";\n\t});\n}\n\nconst options = {\n\tcMapUrl: \"cmaps/\",\n\tcMapPacked: true,\n};\n\nfunction PDFDocument({\n\tparentSize,\n\tpdf,\n\tcurrentPage,\n\tmaterialRendered,\n\tmaterialLoaded,\n\tcaptureMaterialData,\n\tdocumentRef,\n}: {\n\tparentSize: any;\n\tpdf: File | undefined;\n\tcurrentPage: number;\n\tmaterialRendered: Function;\n\tmaterialLoaded: (numPages: number) => void;\n\tcaptureMaterialData: Function;\n\tdocumentRef: RefObject<any>;\n}) {\n\tconst dispatch = useDispatch();\n\tconst hasData = useSelector(analyze.selectors.getDataExists);\n\n\treturn (\n\t\t<Document\n\t\t\tfile={pdf}\n\t\t\toptions={options}\n\t\t\tonLoadSuccess={({ numPages }) => {\n\t\t\t\tmaterialLoaded(numPages);\n\t\t\t}}\n\t\t\tinputRef={documentRef}\n\t\t\tonItemClick={({ pageNumber }) => {\n\t\t\t\tdispatch(setPage(parseInt(pageNumber)));\n\t\t\t}}\n\t\t>\n\t\t\t{pdf && (\n\t\t\t\t<Page\n\t\t\t\t\twidth={parentSize.width}\n\t\t\t\t\tpageNumber={currentPage}\n\t\t\t\t\tonRenderSuccess={() => {\n\t\t\t\t\t\tremoveTextLayerOffset();\n\t\t\t\t\t\tmaterialRendered();\n\t\t\t\t\t\t// if data already exists, the Section-SelectionType has been already chosen once\n\t\t\t\t\t\t// otherwise we dont need to capture new data on every re-render\n\t\t\t\t\t\t//TODO: however, this means once the Section-SelectionType has been used once, we still always capture the data on re-render\n\t\t\t\t\t\tif (hasData) captureMaterialData(documentRef);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</Document>\n\t);\n}\n\nexport const PDFDocumentContainer = connect(getRenderCritialData, {\n\tmaterialRendered,\n\tmaterialLoaded,\n\tcaptureMaterialData: analyze.actions.captureMaterialData,\n})(PDFDocument);\n\n// Material Data on change of page width without page numb change\n// Material Data init on first turning on the button\n","import { connect } from \"react-redux\";\nimport React, { ChangeEvent } from \"react\";\nimport { materialUploaded } from \"../actions\";\nimport { getPDF } from \"../selectors\";\n\nfunction PDFUpload({\n\tpdf,\n\tonUpload,\n}: {\n\tpdf: File | undefined;\n\tonUpload: (event: ChangeEvent<HTMLInputElement>) => void;\n}) {\n\treturn pdf ? null : <input onChange={onUpload} type=\"file\" accept=\".pdf\" />;\n}\n\nexport const PDFUploadContainer = connect(getPDF, { onUpload: materialUploaded })(PDFUpload);\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { IconButton } from \"@material-ui/core\";\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { nextPage, previousPage } from \"../actions\";\n\nexport const PreviousButton = () => {\n\tconst dispatch = useDispatch();\n\treturn (\n\t\t<IconButton\n\t\t\ttype=\"button\"\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(previousPage());\n\t\t\t}}\n\t\t>\n\t\t\t<ArrowBackIosIcon></ArrowBackIosIcon>\n\t\t</IconButton>\n\t);\n};\n\nexport const NextButton = () => {\n\tconst dispatch = useDispatch();\n\treturn (\n\t\t<IconButton\n\t\t\ttype=\"button\"\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(nextPage());\n\t\t\t}}\n\t\t>\n\t\t\t<ArrowForwardIosIcon></ArrowForwardIosIcon>\n\t\t</IconButton>\n\t);\n};\n","import { useState } from \"react\";\nimport DescriptionOutlinedIcon from \"@material-ui/icons/DescriptionOutlined\";\nimport DescriptionTwoToneIcon from \"@material-ui/icons/DescriptionTwoTone\";\nimport React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleDisplayState } from \"../actions\";\n\nexport const ShowMaterialButton = () => {\n\tconst [outlined, setOutlined] = useState(true);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<IconButton\n\t\t\ttype=\"button\"\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(toggleDisplayState());\n\t\t\t\tsetOutlined(!outlined);\n\t\t\t}}\n\t\t>\n\t\t\t{outlined ? (\n\t\t\t\t<DescriptionOutlinedIcon></DescriptionOutlinedIcon>\n\t\t\t) : (\n\t\t\t\t<DescriptionTwoToneIcon></DescriptionTwoToneIcon>\n\t\t\t)}\n\t\t</IconButton>\n\t);\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Typography, TextField } from \"@material-ui/core\";\nimport { setPage } from \"../../actions\";\nimport { getPageControlData } from \"../../selectors\";\n\nconst nonDigitRegEx = /(\\D)/;\n\nexport const validatePageChoice = (possiblePage: string, totalPages: number) => {\n\tif (possiblePage === \"\" || possiblePage.trim().match(nonDigitRegEx) !== null) return false;\n\n\tconst asInt = parseInt(possiblePage);\n\tif (asInt < 1 || totalPages < asInt) return false;\n\n\treturn true;\n};\n\nexport const PageChooser = () => {\n\tconst dispatch = useDispatch();\n\t// parent only renders this component if these values exist\n\tconst { currentPage, totalPages }: { currentPage?: number; totalPages?: number } = useSelector(getPageControlData);\n\n\tconst [state, setState] = useState({\n\t\terror: false,\n\t\tvalue: currentPage?.toString(),\n\t\tuserInput: currentPage?.toString(),\n\t});\n\n\t// with this we can trigger a re-render onChange,\n\t// while making sure that if a new currentPage arrives, we reset the component\n\tif (state.value !== currentPage.toString()) {\n\t\tsetState({ error: false, value: currentPage.toString(), userInput: currentPage.toString() });\n\t}\n\n\treturn (\n\t\t<Typography variant=\"h6\">\n\t\t\t<TextField\n\t\t\t\ttype=\"text\"\n\t\t\t\tvariant=\"filled\"\n\t\t\t\tvalue={state.userInput}\n\t\t\t\tonKeyDown={(event) => {\n\t\t\t\t\tif (event.key === \"Enter\") {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tconst submittedValue = (event.target as HTMLFormElement).value;\n\t\t\t\t\t\tif (!state.error) {\n\t\t\t\t\t\t\tdispatch(setPage(parseInt(submittedValue)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst submittedValue = (event.target as HTMLTextAreaElement).value;\n\t\t\t\t\tif (validatePageChoice(submittedValue, totalPages as number)) {\n\t\t\t\t\t\tsetState({ ...state, error: false, userInput: submittedValue });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetState({ ...state, error: true, userInput: submittedValue });\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\terror={state.error}\n\t\t\t/>\n\t\t\tof {totalPages}\n\t\t</Typography>\n\t);\n};\n","import * as t from \"./actionTypes\";\nimport type { DisplayData, DisplayStatus } from \"./model\";\nimport { createRef } from \"react\";\n\nconst initialState: DisplayData = {\n\tdisplayStatus: \"SHOW\",\n\tcurrentPage: 1,\n\tdocumentRef: createRef(),\n};\n\nconst displayData = (state = initialState, { type, payload }: { type: string; payload: any }): DisplayData => {\n\tswitch (type) {\n\t\tcase t.PDF_UPLOADED:\n\t\t\treturn { ...state, pdf: payload as File };\n\t\tcase t.MATERIAL_LOADED:\n\t\t\treturn { ...state, totalPages: payload as number };\n\t\tcase t.PAGE_UPDATE:\n\t\t\treturn { ...state, currentPage: payload as number };\n\t\tcase t.DISPLAY_STATUS:\n\t\t\treturn { ...state, displayStatus: payload as DisplayStatus };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default displayData;\n","import * as actions from \"./actions\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as components from \"./components\";\nimport * as constants from \"./constants\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\n\nexport default { actions, actionTypes, components, constants, reducer, selectors };\n","import { NAME } from \"./constants\";\nimport { SelectionData } from \"./model\";\nimport { createSelector } from \"reselect\";\nimport analyze from \"../analyze\";\nimport display from \"../display\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getSectionIndex = createSelector(getAll, (state: SelectionData) => state.sectionIndex);\n\nexport const getUpdateAllowed = createSelector(getAll, (state: SelectionData) => state.sectionUpdateAllowed);\n\nexport const getSectionMovementState = createSelector(getAll, (state: SelectionData) => state.sectionMovementState);\n\nexport const getCurrentSpanGroup = createSelector(\n\tanalyze.selectors.getMaterialSpanGroups,\n\tgetSectionIndex,\n\t(spanGroups, sectionIndex) => spanGroups[sectionIndex]\n);\n\nexport const getCurrentBoundingRectGroup = createSelector(\n\tanalyze.selectors.getMaterialBoundingRectGroups,\n\tgetSectionIndex,\n\t(boundingRectGroups, sectionIndex) => boundingRectGroups[sectionIndex]\n);\n\nexport const getCurrentBoundingRect = createSelector(getCurrentBoundingRectGroup, (group) => group[0]);\n\n//TODO: position in store\nexport const getCurrentSelectionPosition = (state: SelectionData) => {\n\treturn analyze.selectors.getDataExists(state) ? getCurrentBoundingRect(state) : { x: 0, y: 0 };\n};\n\nexport const getCurrentSelectionGroup = createSelector(\n\tanalyze.selectors.getWordSelectionGroups,\n\tgetSectionIndex,\n\t(selectionGroups, sectionIndex) => selectionGroups[sectionIndex]\n);\n\nexport const getCurrentWordRangeGroup = createSelector(\n\tanalyze.selectors.getWordRangeGroups,\n\tgetSectionIndex,\n\t(wordRangeGroups, sectionIndex) => wordRangeGroups[sectionIndex]\n);\n\nexport const getCurrentSelectedWordRanges = createSelector(\n\tgetCurrentSelectionGroup,\n\tgetCurrentWordRangeGroup,\n\t(selectionGroup, wordRangeGroup) =>\n\t\twordRangeGroup.flatMap((rangeArr, lineIndex) =>\n\t\t\trangeArr.filter((_, index) => selectionGroup[lineIndex][index] === 1)\n\t\t)\n);\n\nexport const getManuallySelectedString = createSelector(getAll, (state: SelectionData) => state.manuallySelectedString);\n\nconst rangeArrToStr = (rangeArr: Range[]) => rangeArr.map((range) => range.toString()).join(\" \");\nexport const getCurrentRangeArrStr = createSelector(getCurrentSelectedWordRanges, rangeArrToStr);\n\nexport const manualSelectionOccured = createSelector(getManuallySelectedString, (str) => str !== \"\");\n\nexport const getCurrentSelectedString = createSelector(\n\t(state: any) => state,\n\tmanualSelectionOccured,\n\tanalyze.selectors.getDataExists,\n\t(state, manualSelection, dataExists) => {\n\t\tif (manualSelection) return getManuallySelectedString(state);\n\n\t\tif (dataExists) return getCurrentRangeArrStr(state);\n\n\t\treturn \"\";\n\t}\n);\n\nexport const getSelectionType = createSelector(getAll, (state: SelectionData) => state.selectionType);\n\nexport const selectionTypeIsSection = createSelector(getSelectionType, (type) => type === \"SECTION\");\n\nexport const getOverlayRelevantData = createSelector(\n\tgetCurrentSpanGroup,\n\tgetCurrentSelectionGroup,\n\tgetCurrentWordRangeGroup,\n\tgetSectionMovementState,\n\tdisplay.selectors.getDocumentRef,\n\t(spanGroup, selectionGroup, wordRangeGroup, movementState, documentRef) => {\n\t\treturn { spanGroup, selectionGroup, wordRangeGroup, movementState, documentRef };\n\t}\n);\n","import * as t from \"./actionTypes\";\nimport { Dispatch } from \"redux\";\nimport { getSectionMovementState, getUpdateAllowed, getSectionIndex, getSelectionType } from \"./selectors\";\nimport { SectionUpdateType, SelectionUpdateType, SelectionType } from \"./model\";\nimport analyze from \"../analyze\";\nimport { updateSelectionGroup } from \"./services/updateSelectionGroup\";\nimport display from \"../display\";\n\nexport const updateSelection = (type: SelectionUpdateType) => {\n\treturn (dispatch: any, getState: Function) => {\n\t\tconst state = getState();\n\t\tif (getUpdateAllowed(state)) {\n\t\t\tconst selectionGroups = analyze.selectors.getWordSelectionGroups(state);\n\t\t\tconst sectionIndex = getSectionIndex(state);\n\t\t\tconst updatedSelectionGroup = updateSelectionGroup(selectionGroups[sectionIndex], type);\n\t\t\tif (updatedSelectionGroup) dispatch(analyze.actions.updateSelectionGroup(updatedSelectionGroup, sectionIndex));\n\t\t}\n\t};\n};\n\nexport const toggleSectionMovementState = () => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\t\tif (getUpdateAllowed(state)) dispatch({ type: t.SECTION_STATE });\n\t};\n};\n\nexport const updateSection = (updateType: SectionUpdateType) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\t\tif (getUpdateAllowed(state) && getSectionMovementState(state) === \"FREE\") {\n\t\t\tlet sectionIndex;\n\t\t\tconst lastIndex = getSectionIndex(state);\n\t\t\tconst spanGroups = analyze.selectors.getMaterialSpanGroups(state);\n\t\t\tswitch (updateType) {\n\t\t\t\tcase \"UP\":\n\t\t\t\t\tsectionIndex = lastIndex - 1;\n\t\t\t\t\tif (sectionIndex === -1) sectionIndex = spanGroups.length - 1;\n\t\t\t\t\tdispatch({ type: t.SECTION_UPDATE, payload: sectionIndex });\n\t\t\t\t\treturn;\n\t\t\t\tcase \"DOWN\":\n\t\t\t\t\tsectionIndex = lastIndex + 1;\n\t\t\t\t\tif (sectionIndex === spanGroups.length) sectionIndex = 0;\n\t\t\t\t\tdispatch({ type: t.SECTION_UPDATE, payload: sectionIndex });\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport const updateSelectionType = (type: SelectionType) => {\n\treturn { type: t.SELECTION_TYPE, payload: type };\n};\n\nexport const toggleSelectionType = () => (dispatch: any, getState: Function) => {\n\tconst state = getState();\n\tconst selectionTypeIsNotSection = getSelectionType(state) === \"MOUSE\";\n\n\t// on first turning on of Section-SelectionType we make sure to only then capture MaterialData\n\t// this allows the whole section-system to be kept off\n\tconst hasData = analyze.selectors.getDataExists(state);\n\tif (!hasData && selectionTypeIsNotSection)\n\t\tdispatch(analyze.actions.captureMaterialData(display.selectors.getDocumentRef(state)));\n\n\tdispatch(updateSelectionType(selectionTypeIsNotSection ? \"SECTION\" : \"MOUSE\"));\n};\n\nexport const updateManuallySelectedString = (str: string) => {\n\treturn { type: t.SELECTED_STRING, payload: str };\n};\n\nexport const resetManuallySelectedString = () => {\n\treturn updateManuallySelectedString(\"\");\n};\n","import { SelectionUpdateType } from \"../model\";\n\nexport const updateSelectionGroup = (selectionGroup: (1 | 0)[][], type: SelectionUpdateType) => {\n\tlet foundSpan = false;\n\tconst newSelectionGroup = [];\n\n\tswitch (type) {\n\t\tcase \"MINUS_WORD\":\n\t\t\tfor (let index = 0; index < selectionGroup.length; index++) {\n\t\t\t\tlet spanGroup = selectionGroup[index];\n\t\t\t\tif (!foundSpan) {\n\t\t\t\t\tconst oneIndex = spanGroup.indexOf(1);\n\t\t\t\t\tif (oneIndex !== -1) {\n\t\t\t\t\t\tfoundSpan = true;\n\t\t\t\t\t\tspanGroup = [...spanGroup];\n\t\t\t\t\t\tspanGroup[oneIndex] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSelectionGroup.push(spanGroup);\n\t\t\t}\n\t\t\tif (foundSpan) return newSelectionGroup;\n\t\t\tbreak;\n\t\tcase \"MINUS_SPAN\":\n\t\t\tfor (let index = 0; index < selectionGroup.length; index++) {\n\t\t\t\tlet spanGroup = selectionGroup[index];\n\t\t\t\tif (!foundSpan) {\n\t\t\t\t\tconst oneIndex = spanGroup.indexOf(1);\n\t\t\t\t\tif (oneIndex !== -1) {\n\t\t\t\t\t\tfoundSpan = true;\n\t\t\t\t\t\tspanGroup = spanGroup.map((_) => 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSelectionGroup.push(spanGroup);\n\t\t\t}\n\t\t\tif (foundSpan) return newSelectionGroup;\n\t\t\tbreak;\n\t\tcase \"PLUS_WORD\":\n\t\t\tfor (let index = selectionGroup.length - 1; index >= 0; index--) {\n\t\t\t\tlet spanGroup = selectionGroup[index];\n\t\t\t\tif (!foundSpan) {\n\t\t\t\t\tconst zeroIndex = spanGroup.lastIndexOf(0);\n\t\t\t\t\tif (zeroIndex !== -1) {\n\t\t\t\t\t\tfoundSpan = true;\n\t\t\t\t\t\tspanGroup = [...spanGroup];\n\t\t\t\t\t\tspanGroup[zeroIndex] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSelectionGroup.push(spanGroup);\n\t\t\t}\n\t\t\tif (foundSpan) return newSelectionGroup.reverse();\n\t\t\tbreak;\n\n\t\tcase \"PLUS_SPAN\":\n\t\t\tfor (let index = selectionGroup.length - 1; index >= 0; index--) {\n\t\t\t\tlet spanGroup = selectionGroup[index];\n\t\t\t\tif (!foundSpan) {\n\t\t\t\t\tconst zeroIndex = spanGroup.lastIndexOf(0);\n\t\t\t\t\tif (zeroIndex !== -1) {\n\t\t\t\t\t\tfoundSpan = true;\n\t\t\t\t\t\tspanGroup = spanGroup.map((_) => 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSelectionGroup.push(spanGroup);\n\t\t\t}\n\t\t\tif (foundSpan) return newSelectionGroup.reverse();\n\t\t\tbreak;\n\t}\n\n\treturn null;\n};\n","import React, { useMemo, useEffect } from \"react\";\nimport { Layer } from \"react-konva\";\nimport { LayerConfig } from \"konva/types/Layer\";\nimport { RectConfig } from \"konva/types/shapes/Rect\";\nimport { Rect } from \"react-konva\";\nimport { incrementer } from \"../../../shared/utils\";\n\nfunction BoundingRectRect({\n\txOffset = 0,\n\tyOffset = 0,\n\tboundingRect,\n\t...props\n}: {\n\txOffset: number;\n\tyOffset: number;\n\tboundingRect: DOMRect;\n} & RectConfig) {\n\treturn (\n\t\t<Rect\n\t\t\tx={boundingRect.x - xOffset}\n\t\t\ty={boundingRect.y - yOffset}\n\t\t\twidth={boundingRect.width}\n\t\t\theight={boundingRect.bottom - boundingRect.y}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nconst wordRangesToRects = (flatWordRanges: Range[], flatSelectionGroup: any, containerRect: DOMRect, color: string) => {\n\tlet increment = incrementer();\n\n\treturn flatWordRanges\n\t\t.map((range, index) =>\n\t\t\tflatSelectionGroup[index] === 1 ? (\n\t\t\t\t<BoundingRectRect\n\t\t\t\t\txOffset={containerRect.x}\n\t\t\t\t\tyOffset={containerRect.y}\n\t\t\t\t\tboundingRect={range.getBoundingClientRect()}\n\t\t\t\t\tshadowBlur={5}\n\t\t\t\t\tstroke={color}\n\t\t\t\t\topacity={0.3}\n\t\t\t\t\tkey={increment()}\n\t\t\t\t></BoundingRectRect>\n\t\t\t) : null\n\t\t)\n\t\t.filter((val) => val !== null);\n};\n\nexport function WordLayer({\n\tspanGroup,\n\twordRangeGroup,\n\tcolor,\n\tselectionGroup,\n\tcontainer,\n\tshowRects,\n\t...props\n}: {\n\tspanGroup: HTMLSpanElement[];\n\twordRangeGroup: Range[][];\n\tcontainer: HTMLDivElement;\n\tshowRects: boolean;\n} & LayerConfig) {\n\t// we want to be able to quickly show/hide the rects, so we need to memoize\n\t// dependency is on the props (which stay the same if unchanged)\n\tconst boundingRectRects = useMemo(\n\t\t() => wordRangesToRects(wordRangeGroup.flat(), selectionGroup.flat(), container.getBoundingClientRect(), color),\n\t\t[selectionGroup, wordRangeGroup, container, color]\n\t);\n\n\tuseEffect(() => {\n\t\tif (showRects) {\n\t\t\tspanGroup[0].focus();\n\t\t\tspanGroup[0].scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"center\" });\n\t\t}\n\t}, [spanGroup, showRects]);\n\n\treturn <Layer {...props}>{showRects && boundingRectRects}</Layer>;\n}\n","import React, { useLayoutEffect, useState, RefObject } from \"react\";\nimport { Stage } from \"react-konva\";\nimport { WordLayer } from \"./WordLayer\";\nimport { getOverlayRelevantData, selectionTypeIsSection } from \"../selectors\";\nimport { SectionMovementState } from \"../model\";\nimport analyze from \"../../analyze\";\nimport { rectHeight } from \"../../../shared/rect\";\nimport { useSelector } from \"react-redux\";\n\nconst freeColor = \"green\";\nconst lockedColor = \"red\";\n\nfunction DocumentCanvas({\n\tspanGroup,\n\tmovementState,\n\tselectionGroup,\n\twordRangeGroup,\n\tparentSize,\n\tdocumentRef,\n}: {\n\tspanGroup: HTMLSpanElement[];\n\tmovementState: SectionMovementState;\n\tselectionGroup: (0 | 1)[][];\n\twordRangeGroup: Range[][];\n\tparentSize: { width: number };\n\tdocumentRef: RefObject<any>;\n}) {\n\tconst [height, setHeight] = useState(1);\n\tconst showRects = useSelector(selectionTypeIsSection);\n\n\tuseLayoutEffect(() => {\n\t\tif (documentRef.current) {\n\t\t\tsetHeight(rectHeight((documentRef.current as HTMLDivElement).getBoundingClientRect()));\n\t\t}\n\t}, [documentRef]);\n\n\treturn (\n\t\t<Stage width={parentSize.width} height={height} style={{ position: \"absolute\", pointerEvents: \"none\", zIndex: 1 }}>\n\t\t\t{documentRef.current && (\n\t\t\t\t<WordLayer\n\t\t\t\t\tshowRects={showRects}\n\t\t\t\t\tcontainer={documentRef.current as HTMLDivElement}\n\t\t\t\t\tspanGroup={spanGroup}\n\t\t\t\t\tcolor={movementState === \"FREE\" ? freeColor : lockedColor}\n\t\t\t\t\tselectionGroup={selectionGroup}\n\t\t\t\t\twordRangeGroup={wordRangeGroup}\n\t\t\t\t></WordLayer>\n\t\t\t)}\n\t\t</Stage>\n\t);\n}\n\nexport const DocumentCanvasContainer = analyze.components.DataGuardHOC(DocumentCanvas, getOverlayRelevantData);\n","import { useState } from \"react\";\nimport MouseIcon from \"@material-ui/icons/Mouse\";\nimport BorderAllIcon from \"@material-ui/icons/BorderAll\";\nimport React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleSelectionType } from \"../actions\";\n\nexport const SelectionTypeButton = () => {\n\tconst [outlined, setOutlined] = useState(true);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<IconButton\n\t\t\ttype=\"button\"\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(toggleSelectionType());\n\t\t\t\tsetOutlined(!outlined);\n\t\t\t}}\n\t\t>\n\t\t\t{outlined ? <MouseIcon></MouseIcon> : <BorderAllIcon></BorderAllIcon>}\n\t\t</IconButton>\n\t);\n};\n","import { SelectionData, SelectionType } from \"./model\";\nimport * as t from \"./actionTypes\";\nimport analyze from \"../analyze\";\nimport display from \"../display\";\n\n//TODO: prerender next few pages?\n\n//TODO: state per page\n\n//TODO: Second CardRiver, where you can choose the page! (for comparison)\n\nconst initialState: SelectionData = {\n\tsectionIndex: 1,\n\tsectionUpdateAllowed: false,\n\tsectionMovementState: \"FREE\",\n\tselectionType: \"MOUSE\",\n\tmanuallySelectedString: \"\",\n};\n\nconst disableSectionUpdate = (state: SelectionData) => {\n\treturn { ...state, sectionUpdateAllowed: false };\n};\nconst resetSectionSelection = (state: SelectionData) => {\n\treturn { ...state, sectionIndex: 0, sectionUpdateAllowed: true };\n};\n\nconst selectionData = (state = initialState, { type, payload }: { type: string; payload: any }): SelectionData => {\n\tswitch (type) {\n\t\tcase t.SECTION_UPDATE:\n\t\t\treturn { ...state, sectionIndex: payload as number };\n\t\tcase t.SECTION_STATE:\n\t\t\treturn { ...state, sectionMovementState: state.sectionMovementState === \"FREE\" ? \"LOCKED\" : \"FREE\" };\n\t\tcase display.actionTypes.PAGE_UPDATE:\n\t\t\treturn disableSectionUpdate(state);\n\t\tcase analyze.actionTypes.MATERIAL_DATA:\n\t\t\treturn resetSectionSelection(state);\n\t\tcase t.SELECTION_TYPE:\n\t\t\treturn { ...state, selectionType: payload as SelectionType };\n\t\tcase t.SELECTED_STRING:\n\t\t\treturn { ...state, manuallySelectedString: payload as string };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default selectionData;\n","import * as actions from \"./actions\";\nimport * as components from \"./components\";\nimport * as constants from \"./constants\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\n\nexport default { actions, components, constants, reducer, selectors };\n","import { useRef, useEffect, MutableRefObject } from \"react\";\n\n// only global eventListener for now\nexport const useEventListener = (eventName: string, handler: any) => {\n\tconst savedHandler: MutableRefObject<Function> = useRef(() => {});\n\n\tuseEffect(() => {\n\t\tsavedHandler.current = handler;\n\t}, [handler]);\n\n\tuseEffect(() => {\n\t\tconst eventListener = (event: Event) => savedHandler.current(event);\n\t\tdocument.addEventListener(eventName, eventListener);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(eventName, eventListener);\n\t\t};\n\t}, [eventName]);\n};\n","export const NAME = \"userFocus\";\n","import { NAME } from \"./constants\";\n\nexport const FOCUS_UPDATE = NAME + \"/FOCUS_UPDATE\";\n","import { createSelector } from \"reselect\";\nimport { NAME } from \"./constants\";\nimport { FocusState } from \"./model\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getFocus = createSelector(getAll, (state: FocusState) => state.focus);\n","import * as t from \"./actionTypes\";\nimport { UserFocus } from \"./model\";\nimport { Dispatch } from \"redux\";\nimport { getFocus } from \"./selectors\";\nimport analyze from \"../analyze\";\n\nexport const updateFocus = (focus: UserFocus) => {\n\treturn { type: t.FOCUS_UPDATE, payload: focus };\n};\n\nexport const tryUpdateFocus = (focus: UserFocus) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tif (getFocus(getState()) !== focus) dispatch(updateFocus(focus));\n\t};\n};\n\nexport const toggleContextMenuFocus = () => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\t\tif (analyze.selectors.getDataExists(state)) {\n\t\t\tconst currentFocus = getFocus(getState());\n\t\t\tswitch (currentFocus) {\n\t\t\t\tcase \"CONTEXT_MENU\":\n\t\t\t\t\tdispatch(updateFocus(\"SELECTION\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"SELECTION\":\n\t\t\t\t\tdispatch(updateFocus(\"CONTEXT_MENU\"));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n};\n","import { FocusState, UserFocus } from \"./model\";\nimport * as t from \"./actionTypes\";\n\nconst initialState: FocusState = { focus: \"CONTROL\" };\n\nconst focus = (state = initialState, { type, payload }: { type: string; payload: any }): FocusState => {\n\tswitch (type) {\n\t\tcase t.FOCUS_UPDATE:\n\t\t\treturn { ...state, focus: payload as UserFocus };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default focus;\n","import * as actions from \"./actions\";\nimport * as constants from \"./constants\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\n\nexport default { actions, constants, reducer, selectors };\n","export const NAME = \"creationData\";\n","import { NAME } from \"./constants\";\n\nexport const TOGGLE_CONTEXT_MENU = NAME + \"/TOGGLE_CONTEXT_MENU\";\nexport const CLOSE_CONTEXT_MENU = NAME + \"/CLOSE_CONTEXT_MENU\";\nexport const OPEN_CONTEXT_MENU = NAME + \"/OPEN_CONTEXT_MENU\";\n","import { UpdateType, CardPayloadConfig, CreationType, QACardContent, CardType } from \"../model\";\n\ntype updateContentStrFunction = (oldStr: string, newStr: string) => string;\n\ntype partialUpdateContentStrFunction = (oldStr: string) => string;\n\nconst updateContentStrFunctions: { [key in UpdateType]: updateContentStrFunction } = {\n\tREPLACE: (_: string, newStr: string) => newStr,\n\tAPPEND: (oldStr: string, newStr: string) => oldStr + newStr,\n};\n\nconst createPartialUpdateContentStrFunction = (updateType: UpdateType, newStr: string) => (oldStr: string) =>\n\tupdateContentStrFunctions[updateType](oldStr, newStr);\n\ntype creationFunction = (\n\toldConfig: CardPayloadConfig,\n\tpartialUpdateFunction: partialUpdateContentStrFunction\n) => CardPayloadConfig;\n\nconst defaultCreationFunction: creationFunction = (oldConfig, partialUpdateFunction) => {\n\treturn { ...oldConfig, content: partialUpdateFunction(oldConfig.content as string) };\n};\n\nconst creationFunctions: {\n\t[key in CreationType]: creationFunction;\n} = {\n\tNOTE: defaultCreationFunction,\n\tQ: (oldConfig, partialUpdateFunction) => {\n\t\tconst content = oldConfig.content as QACardContent;\n\t\treturn { ...oldConfig, content: { ...content, q: partialUpdateFunction(content.q) } };\n\t},\n\tA: (oldConfig, partialUpdateFunction) => {\n\t\tconst content = oldConfig.content as QACardContent;\n\t\treturn { ...oldConfig, content: { ...content, a: partialUpdateFunction(content.a) } };\n\t},\n};\n\nexport const contentStringToConfig = (\n\tcontentStr: string,\n\ttype: CardType,\n\tcreationType: CreationType,\n\tupdateType: UpdateType,\n\tcurrentCard?: CardPayloadConfig\n): CardPayloadConfig => {\n\tconst partialUpdateFunction = createPartialUpdateContentStrFunction(updateType, contentStr);\n\tconst isCardUpdate = !!currentCard;\n\treturn isCardUpdate\n\t\t? creationFunctions[creationType](currentCard as CardPayloadConfig, partialUpdateFunction)\n\t\t: creationFunctions[creationType]({ type, content: type === \"Q-A\" ? { q: \"\", a: \"\" } : \"\" }, partialUpdateFunction);\n};\n","export const NAME = \"cards\";\n","import { NAME } from \"./constants\";\n\nexport const CARD_UPDATE = NAME + \"/CARD_UPDATE\";\nexport const CARD_PUSH = NAME + \"/CARD_PUSH\";\n","import { createSelector } from \"reselect\";\nimport { CardsState } from \"./model\";\n\nexport const getAll = (state: any) => state.cards as CardsState;\n\nexport const getLastCardIDNumber = createSelector(getAll, (state) => state.lastCardIDNumber);\n\nexport const getCards = createSelector(getAll, (state: CardsState) => state.cards);\n","import { CardPayload, FinalizedCardPayload, CreationType, UpdateType, CardType } from \"./model\";\nimport * as t from \"./actionTypes\";\nimport { Dispatch } from \"redux\";\nimport { getLastCardIDNumber, getCards } from \"./selectors\";\nimport { contentStringToConfig } from \"./services/config\";\n\nconst createCardID = (lastCardIDNumber: number) => (lastCardIDNumber + 1).toString();\n\nexport const cardPush = (cardPayload: CardPayload) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tdispatch({\n\t\t\ttype: t.CARD_PUSH,\n\t\t\tpayload: {\n\t\t\t\t...cardPayload,\n\t\t\t\tcard: { ...cardPayload.card, cardID: createCardID(getLastCardIDNumber(getState())) },\n\t\t\t} as FinalizedCardPayload,\n\t\t});\n\t};\n};\n\nexport const cardUpdate = (card: CardPayload) => {\n\treturn { type: t.CARD_UPDATE, payload: card };\n};\n\nexport const updateCardContent = (\n\tcontentString: string,\n\tcardID: string,\n\tcreationType: CreationType,\n\tupdateType: UpdateType,\n\triverID: string\n) => {\n\treturn (dispatch: Dispatch, getState: Function) => {\n\t\tconst state = getState();\n\n\t\tconst currentCard = getCards(state)[cardID as string];\n\t\tconst config = contentStringToConfig(contentString, currentCard.type, creationType, updateType, currentCard);\n\n\t\tdispatch(\n\t\t\tcardUpdate({\n\t\t\t\triverID,\n\t\t\t\tcard: config,\n\t\t\t})\n\t\t);\n\t};\n};\n\nexport const pushCardContent = (\n\tcontentString: string,\n\tcreationType: CreationType,\n\tupdateType: UpdateType,\n\triverID: string,\n\ttype: CardType\n) => {\n\tconst config = contentStringToConfig(contentString, type, creationType, updateType);\n\treturn cardPush({ riverID, card: config });\n};\n","import * as t from \"./actionTypes\";\nimport { CardsState, FinalizedCardPayload } from \"./model\";\n\nconst intialState: CardsState = {\n\tcards: {\n\t\t\"0\": { cardID: \"0\", type: \"Q-A\", content: { q: \"Was ist der Sinn des Lebens?\", a: \"42\" } },\n\t\t\"1\": { cardID: \"1\", type: \"Q-A\", content: { q: \"Welches Layout macht mehr Sinn?\", a: \"??\" } },\n\t\t\"2\": { cardID: \"2\", type: \"Note\", content: \"Note here\" },\n\t},\n\tlastCardIDNumber: 2,\n};\n\nconst cards = (state = intialState, { type, payload }: { type: string; payload: FinalizedCardPayload }) => {\n\tlet cardID;\n\tlet cardObj;\n\tswitch (type) {\n\t\tcase t.CARD_PUSH:\n\t\t\tconst lastCardIDNumber = state.lastCardIDNumber + 1;\n\n\t\t\tcardObj = { ...state.cards };\n\t\t\tcardObj[payload.card.cardID] = payload.card;\n\n\t\t\treturn { ...state, cards: cardObj, lastCardIDNumber };\n\t\tcase t.CARD_UPDATE:\n\t\t\tcardID = payload.card.cardID as string;\n\t\t\tcardObj = { ...state.cards };\n\t\t\tcardObj[cardID] = payload.card;\n\n\t\t\treturn { ...state, cards: cardObj };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default cards;\n","import * as services from \"./services\";\nimport * as constants from \"./constants\";\nimport * as actionTypes from \"./actionTypes\";\nimport * as actions from \"./actions\";\nimport * as selectors from \"./selectors\";\nimport reducer from \"./reducer\";\n\nexport default { services, constants, actionTypes, actions, reducer, selectors };\n","import * as t from \"./actionTypes\";\nimport select from \"../select\";\nimport { CardType, CreationType } from \"../cards/model\";\nimport cards from \"../cards\";\nimport focus from \"../focus\";\n\nexport const toggleContextMenu = () => {\n\treturn (dispatch: any) => {\n\t\tdispatch({ type: t.TOGGLE_CONTEXT_MENU });\n\t\tdispatch(focus.actions.toggleContextMenuFocus());\n\t};\n};\n\nexport const closeContextMenu = () => {\n\treturn (dispatch: any) => {\n\t\tdispatch({ type: t.CLOSE_CONTEXT_MENU });\n\t\tdispatch(focus.actions.updateFocus(\"SELECTION\"));\n\t};\n};\n\nexport const openContextMenu = () => {\n\treturn (dispatch: any) => {\n\t\tdispatch({ type: t.OPEN_CONTEXT_MENU });\n\t\tdispatch(focus.actions.updateFocus(\"SELECTION\"));\n\t};\n};\n\nexport const triggerSelectionGrab = (riverID: string, type: CardType, creationType: CreationType, cardID?: string) => {\n\treturn (dispatch: Function, getState: Function) => {\n\t\tdispatch(closeContextMenu());\n\n\t\t//TODO\n\t\tconst updateType = \"REPLACE\";\n\n\t\tconst selectedString = select.selectors.getCurrentSelectedString(getState());\n\t\tconst isUpdate = cardID !== undefined;\n\n\t\tif (isUpdate) {\n\t\t\tdispatch(cards.actions.updateCardContent(selectedString, cardID as string, creationType, updateType, riverID));\n\t\t} else {\n\t\t\tdispatch(cards.actions.pushCardContent(selectedString, creationType, updateType, riverID, type));\n\t\t}\n\t};\n};\n","import * as t from \"./actionTypes\";\nimport { CreationData } from \"./model\";\nimport { createRef } from \"react\";\nimport { CardPayload } from \"../cards/model\";\nimport cards from \"../cards\";\n\nconst initialState: CreationData = { open: false, menuRef: createRef(), qaRefs: [createRef(), createRef()] };\n\nconst creationData = (state = initialState, { type, payload }: { type: string; payload: any }): CreationData => {\n\tswitch (type) {\n\t\tcase t.TOGGLE_CONTEXT_MENU:\n\t\t\treturn { ...state, open: !state.open };\n\t\tcase t.CLOSE_CONTEXT_MENU:\n\t\t\treturn { ...state, open: false };\n\t\tcase t.OPEN_CONTEXT_MENU:\n\t\t\treturn { ...state, open: true };\n\t\tcase cards.actionTypes.CARD_PUSH:\n\t\t\t//TODO: reliance on order of refs and coupling to the fact that a new card was pushed\n\t\t\t// no support for multiple rivers\n\t\t\tif ((payload as CardPayload).card.type === \"Q-A\") return { ...state, qaRefs: [...state.qaRefs, createRef()] };\n\t\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default creationData;\n","export const NAME = \"cardRiverState\";\n","import { NAME } from \"./constants\";\nimport { createSelector } from \"reselect\";\nimport { CardRiverState } from \"./model\";\nimport cards from \"../cards\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getRiverMakeUps = createSelector(getAll, (state: CardRiverState) => state.riverMakeUps);\n\nexport const getActiveRiverMakeUpID = createSelector(getAll, (state: CardRiverState) => state.activeRiverMakeUpID);\n\nexport const getActiveRiverMakeUp = createSelector(\n\tgetRiverMakeUps,\n\tgetActiveRiverMakeUpID,\n\t(makeUps, id) => makeUps[id]\n);\n\nexport const getActiveRiverCardIDs = createSelector(getActiveRiverMakeUp, (makeUp) => makeUp.cardIDs);\n\nexport const getActiveRiverCards = createSelector(\n\tgetActiveRiverCardIDs,\n\tcards.selectors.getCards,\n\t(makeUpCardIDs, cards) => makeUpCardIDs.map((id) => cards[id])\n);\n\nexport const getRiverShowState = createSelector(getAll, (state: CardRiverState) => state.riverShowState);\n\nexport const riverShowStateIsShow = createSelector(getRiverShowState, (state) => state === \"SHOW\");\n","import React, { useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport focus from \"../../focus\";\nimport { useDispatch } from \"react-redux\";\n\nexport const HybridCardField = ({\n\tstoreValue = \"\",\n\tsaveChanges,\n\tstyle,\n\t...rest\n}: {\n\tstoreValue?: string;\n\tsaveChanges: (value: string) => void;\n\tstyle: any;\n} & TextFieldProps) => {\n\tconst dispatch = useDispatch();\n\tconst [state, setState] = useState({ storeValue, mutableValue: storeValue });\n\n\t// reset if new storeValue, otherwise keep user-mutated value\n\tif (state.storeValue !== storeValue) {\n\t\tsetState({ storeValue, mutableValue: storeValue });\n\t}\n\n\t// need the onChange-pattern, because we want to be able to pre-fill the field from the store\n\treturn (\n\t\t<TextField\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(focus.actions.tryUpdateFocus(\"EDITOR\"));\n\t\t\t}}\n\t\t\tvariant=\"filled\"\n\t\t\tvalue={state.mutableValue}\n\t\t\tonChange={(event) => {\n\t\t\t\tconst submittedValue = (event.target as HTMLTextAreaElement).value;\n\t\t\t\tsetState({ ...state, mutableValue: submittedValue });\n\t\t\t}}\n\t\t\tonBlur={(event: any) => {\n\t\t\t\tsaveChanges(event.target.value);\n\t\t\t}}\n\t\t\tstyle={style}\n\t\t\t{...rest}\n\t\t></TextField>\n\t);\n};\n","import Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\nimport { HybridCardField } from \"./HybridCardField\";\nimport { CardConfig, QACardContent } from \"../../cards/model\";\nimport { useDispatch } from \"react-redux\";\nimport cards from \"../../cards\";\n\ntype CardProps = { config: CardConfig; riverID: string };\n\nconst NoteCard = ({ config, riverID }: CardProps) => {\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<HybridCardField\n\t\t\tsaveChanges={(value) => {\n\t\t\t\tdispatch(cards.actions.updateCardContent(value, config.cardID, \"NOTE\", \"REPLACE\", riverID));\n\t\t\t}}\n\t\t\tstoreValue={config.content as string}\n\t\t\tfullWidth\n\t\t\tlabel=\"Note\"\n\t\t\tvariant=\"filled\"\n\t\t\tstyle={{ backgroundColor: \"#CBF3F0\" }}\n\t\t\tInputLabelProps={{ style: { color: \"#000000\" } }}\n\t\t></HybridCardField>\n\t);\n};\n\nconst QACard = ({ config, riverID }: CardProps) => {\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<Grid container direction=\"column\" spacing={1}>\n\t\t\t<Grid item>\n\t\t\t\t<HybridCardField\n\t\t\t\t\tsaveChanges={(value) => {\n\t\t\t\t\t\tdispatch(cards.actions.updateCardContent(value, config.cardID, \"Q\", \"REPLACE\", riverID));\n\t\t\t\t\t}}\n\t\t\t\t\tstoreValue={(config.content as QACardContent).q}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tlabel={\"Question\"}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tstyle={{ backgroundColor: \"#FFBF69\" }}\n\t\t\t\t\tInputLabelProps={{ style: { color: \"#000000\" } }}\n\t\t\t\t></HybridCardField>\n\t\t\t</Grid>\n\t\t\t<Grid item>\n\t\t\t\t<HybridCardField\n\t\t\t\t\tsaveChanges={(value) => {\n\t\t\t\t\t\tdispatch(cards.actions.updateCardContent(value, config.cardID, \"A\", \"REPLACE\", riverID));\n\t\t\t\t\t}}\n\t\t\t\t\tstoreValue={(config.content as QACardContent).a}\n\t\t\t\t\tfullWidth\n\t\t\t\t\tlabel={\"Answer\"}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tstyle={{ backgroundColor: \"#2EC4B6\" }}\n\t\t\t\t\tInputLabelProps={{ style: { color: \"#000000\" } }}\n\t\t\t\t></HybridCardField>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nexport const Card = ({ config, riverID }: CardProps) => {\n\tswitch (config.type) {\n\t\tcase \"Note\":\n\t\t\treturn <NoteCard config={config} riverID={riverID}></NoteCard>;\n\t\tcase \"Q-A\":\n\t\t\treturn <QACard config={config} riverID={riverID}></QACard>;\n\t}\n};\n","import Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { useState, useMemo } from \"react\";\nimport { Divider } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { getActiveRiverCards, getActiveRiverMakeUpID } from \"../selectors\";\nimport { incrementer } from \"../../../shared/utils\";\nimport { Card } from \"./Card\";\nimport { CardConfig } from \"../../cards/model\";\n\n//TODO: mark cards that are hovered over in the contextmenu, so that we see where the content would end up\n// canvas?\n\n//TODO: selection in CardRiver should stay highlighted when the contextMenu opens?\n\n//TODO: contextMenu as permant element, maybe sidebar? Selected String in ContextMenu to show what was selected?\n\nconst GridDivider = () => (\n\t<Grid item>\n\t\t<Divider></Divider>\n\t</Grid>\n);\n\nconst toCardGridItemsWithDividers = (cards: CardConfig[], riverID: string) => {\n\tconst increment = incrementer();\n\n\treturn cards.reduce((prev, currentCard, index, arr) => {\n\t\tprev.push(\n\t\t\t<Grid item key={increment()}>\n\t\t\t\t<Card config={currentCard} riverID={riverID} key={increment()}></Card>\n\t\t\t</Grid>\n\t\t);\n\n\t\tconst notLastCard = index < arr.length - 1;\n\t\tif (notLastCard) prev.push(<GridDivider key={increment()}></GridDivider>);\n\t\treturn prev;\n\t}, [] as any[]);\n};\n\nexport const CardRiver = () => {\n\tconst [elevation, setElevation] = useState(3);\n\tconst riverID = useSelector(getActiveRiverMakeUpID);\n\tconst riverCards = useSelector(getActiveRiverCards);\n\n\t// this should only re-render if the store values change\n\tconst gridItems = useMemo(() => toCardGridItemsWithDividers(riverCards, riverID), [riverCards, riverID]);\n\n\treturn riverCards ? (\n\t\t<Accordion\n\t\t\tdefaultExpanded={true}\n\t\t\tonMouseEnter={() => {\n\t\t\t\tsetElevation(20);\n\t\t\t}}\n\t\t\tonMouseLeave={() => {\n\t\t\t\tsetElevation(3);\n\t\t\t}}\n\t\t\televation={elevation}\n\t\t>\n\t\t\t<AccordionSummary>CardRiver</AccordionSummary>\n\t\t\t<AccordionDetails>\n\t\t\t\t<Grid container direction=\"column\" spacing={2} justify=\"center\" alignItems=\"stretch\">\n\t\t\t\t\t{gridItems}\n\t\t\t\t</Grid>\n\t\t\t</AccordionDetails>\n\t\t</Accordion>\n\t) : null;\n};\n","import { NAME } from \"./constants\";\n\nexport const RIVER_SHOW_STATE = NAME + \"/RIVER_SHOW_STATE\";\n","import { useState } from \"react\";\nimport SpeakerNotesOutlinedIcon from \"@material-ui/icons/SpeakerNotesOutlined\";\nimport SpeakerNotesTwoToneIcon from \"@material-ui/icons/SpeakerNotesTwoTone\";\nimport React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleRiverShowState } from \"../actions\";\n\nexport const ShowRiverButton = () => {\n\tconst [outlined, setOutlined] = useState(true);\n\tconst dispatch = useDispatch();\n\treturn (\n\t\t<IconButton\n\t\t\ttype=\"button\"\n\t\t\tonClick={() => {\n\t\t\t\tdispatch(toggleRiverShowState());\n\t\t\t\tsetOutlined(!outlined);\n\t\t\t}}\n\t\t>\n\t\t\t{outlined ? (\n\t\t\t\t<SpeakerNotesOutlinedIcon></SpeakerNotesOutlinedIcon>\n\t\t\t) : (\n\t\t\t\t<SpeakerNotesTwoToneIcon></SpeakerNotesTwoToneIcon>\n\t\t\t)}\n\t\t</IconButton>\n\t);\n};\n","import * as t from \"./actionTypes\";\nimport { riverShowStateIsShow } from \"./selectors\";\nimport { Dispatch } from \"redux\";\n\nexport const toggleRiverShowState = () => (dispatch: Dispatch, getState: Function) => {\n\tdispatch({ type: t.RIVER_SHOW_STATE, payload: riverShowStateIsShow(getState()) ? \"HIDE\" : \"SHOW\" });\n};\n","import { CardRiverState, RiverShowState } from \"./model\";\nimport { FinalizedCardPayload } from \"../cards/model\";\nimport cards from \"../cards\";\nimport * as t from \"./actionTypes\";\n\nconst intialState: CardRiverState = {\n\triverMakeUps: {\n\t\tRiverMakeUp1: {\n\t\t\triverID: \"RiverMakeUp1\",\n\t\t\tcardIDs: [\"2\", \"0\", \"1\"],\n\t\t\tactive: true,\n\t\t},\n\t},\n\tactiveRiverMakeUpID: \"RiverMakeUp1\",\n\tlastRiverIDNumber: 1,\n\triverShowState: \"SHOW\",\n};\n\nconst cardRiverState = (\n\tstate = intialState,\n\t{ type, payload }: { type: string; payload: FinalizedCardPayload | RiverShowState }\n) => {\n\tlet riverMakeUp;\n\tlet riverMakeUps;\n\tswitch (type) {\n\t\tcase cards.actionTypes.CARD_PUSH:\n\t\t\triverMakeUp = {\n\t\t\t\t...state.riverMakeUps[(payload as FinalizedCardPayload).riverID],\n\t\t\t\tcardIDs: [\n\t\t\t\t\t...state.riverMakeUps[(payload as FinalizedCardPayload).riverID].cardIDs,\n\t\t\t\t\t(payload as FinalizedCardPayload).card.cardID,\n\t\t\t\t],\n\t\t\t};\n\t\t\triverMakeUps = { ...state.riverMakeUps };\n\t\t\triverMakeUps[(payload as FinalizedCardPayload).riverID] = riverMakeUp;\n\n\t\t\treturn { ...state, riverMakeUps: riverMakeUps };\n\t\tcase t.RIVER_SHOW_STATE:\n\t\t\treturn { ...state, riverShowState: payload as RiverShowState };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default cardRiverState;\n","import * as constants from \"./constants\";\nimport * as components from \"./components\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\n\nexport default { constants, components, reducer, selectors };\n","import { NAME } from \"./constants\";\nimport { createSelector } from \"reselect\";\nimport { CreationData } from \"./model\";\nimport select from \"../select\";\nimport river from \"../river\";\n\nexport const getAll = (state: any) => state[NAME];\n\nexport const getContextMenuState = createSelector(getAll, (state: CreationData) => state.open);\n\nexport const getContextMenuRef = createSelector(getAll, (state: CreationData) => state.menuRef);\n\nexport const getContextMenuQARefs = createSelector(getAll, (state: CreationData) => state.qaRefs);\n\nexport const getContextMenuInitData = createSelector(\n\tselect.selectors.getCurrentSelectionPosition,\n\tgetContextMenuState,\n\tgetContextMenuRef,\n\tgetContextMenuQARefs,\n\triver.selectors.getActiveRiverCards,\n\t(position, state, menuRef, qaRefs, riverCards) => {\n\t\treturn { position, state, menuRef, qaRefs, riverCards };\n\t}\n);\n","import React, { RefObject } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport NestedMenuItem from \"material-ui-nested-menu-item\";\nimport { MenuItem, Divider } from \"@material-ui/core\";\nimport { useDispatch, useSelector, connect } from \"react-redux\";\nimport { getContextMenuInitData } from \"../selectors\";\nimport { triggerSelectionGrab } from \"../actions\";\nimport { incrementer } from \"../../../shared/utils\";\nimport river from \"../../river\";\nimport { CardConfig, CardType, CreationType } from \"../../cards/model\";\n\nconst NewQACard = ({ onClick }: any) => <MenuItem onClick={onClick}>New: Q-A</MenuItem>;\nconst NewNoteCard = ({ onClick }: any) => <MenuItem onClick={onClick}>New: Note</MenuItem>;\n\nconst SingleOptionItem = ({ cardConfig, dispatchRiver }: { cardConfig: CardConfig; dispatchRiver: dispatchRiver }) => (\n\t<MenuItem\n\t\tonClick={() => {\n\t\t\tdispatchRiver(cardConfig.type, \"NOTE\", cardConfig.cardID);\n\t\t}}\n\t>\n\t\t{cardConfig.type}\n\t</MenuItem>\n);\n\ntype dispatchRiver = (type: CardType, creationType: CreationType, cardID?: string | undefined) => void;\n\nconst QAOptionItem = ({\n\tcardConfig,\n\tdispatchRiver,\n\tqaRef,\n}: {\n\tcardConfig: CardConfig;\n\tdispatchRiver: dispatchRiver;\n\tqaRef: RefObject<any> | undefined;\n}) => (\n\t<NestedMenuItem label=\"Q-A\" parentMenuOpen={true}>\n\t\t<MenuItem\n\t\t\tref={qaRef}\n\t\t\tonClick={() => {\n\t\t\t\tdispatchRiver(\"Q-A\", \"Q\", cardConfig.cardID);\n\t\t\t}}\n\t\t>\n\t\t\tQ\n\t\t</MenuItem>\n\t\t<MenuItem\n\t\t\tonClick={() => {\n\t\t\t\tdispatchRiver(\"Q-A\", \"A\", cardConfig.cardID);\n\t\t\t}}\n\t\t>\n\t\t\tA\n\t\t</MenuItem>\n\t</NestedMenuItem>\n);\n\nconst CardConfigItem = ({\n\tcardConfig,\n\tdispatchRiver,\n\tqaRef,\n}: {\n\tcardConfig: CardConfig;\n\tdispatchRiver: dispatchRiver;\n\tqaRef?: RefObject<any>;\n}) => {\n\tswitch (cardConfig.type) {\n\t\tcase \"Q-A\":\n\t\t\treturn <QAOptionItem cardConfig={cardConfig} dispatchRiver={dispatchRiver} qaRef={qaRef}></QAOptionItem>;\n\t\tdefault:\n\t\t\treturn <SingleOptionItem cardConfig={cardConfig} dispatchRiver={dispatchRiver}></SingleOptionItem>;\n\t}\n};\n\nconst partialRiverDispatch = (riverID: string, dispatch: any) => {\n\treturn (type: CardType, creationType: CreationType, cardID?: string) => {\n\t\tdispatch(triggerSelectionGrab(riverID, type, creationType, cardID));\n\t};\n};\n\nfunction ContextMenu({\n\tposition,\n\tstate,\n\tmenuRef,\n\tqaRefs,\n\triverCards,\n}: {\n\tposition: { x: number; y: number };\n\tstate: boolean;\n\tmenuRef: RefObject<any>;\n\tqaRefs: RefObject<any>[];\n\triverCards: CardConfig[];\n}) {\n\tconst dispatch = useDispatch();\n\tconst riverID = useSelector(river.selectors.getActiveRiverMakeUpID);\n\tconst dispatchRiverOne = partialRiverDispatch(riverID, dispatch);\n\n\tconst increment = incrementer();\n\tconst qaRefIndex = incrementer();\n\n\t// TODO: need to check for state before rendering MenuItems,\n\t// otherwise it shows up for a split-second when switching the menu off after adding to the river\n\t// weird Race Condition even if I dispatch closeContextMenu first?\n\treturn (\n\t\t<Menu\n\t\t\tref={menuRef}\n\t\t\tkeepMounted\n\t\t\topen={state}\n\t\t\tanchorReference=\"anchorPosition\"\n\t\t\tanchorPosition={state ? { top: position.y, left: position.x } : undefined}\n\t\t>\n\t\t\t{state &&\n\t\t\t\triverCards.map((cardConfig) => (\n\t\t\t\t\t<CardConfigItem\n\t\t\t\t\t\tcardConfig={cardConfig}\n\t\t\t\t\t\tdispatchRiver={dispatchRiverOne}\n\t\t\t\t\t\tkey={increment()}\n\t\t\t\t\t\tqaRef={cardConfig.type === \"Q-A\" ? qaRefs[qaRefIndex()] : undefined}\n\t\t\t\t\t></CardConfigItem>\n\t\t\t\t))}\n\t\t\t{state && riverCards.length > 0 && <Divider />}\n\n\t\t\t<NewQACard\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdispatchRiverOne(\"Q-A\", \"Q\");\n\t\t\t\t}}\n\t\t\t></NewQACard>\n\t\t\t<NewNoteCard\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdispatchRiverOne(\"Note\", \"NOTE\");\n\t\t\t\t}}\n\t\t\t></NewNoteCard>\n\t\t</Menu>\n\t);\n}\n\nexport const ContextMenuContainer = connect(getContextMenuInitData)(ContextMenu);\n","import { getContextMenuRef, getContextMenuQARefs } from \"./selectors\";\n\n// the root div for the menu invisibly covers the whole screen\n// the actual div that is visible is this\nconst baseContextMenuSelector = \"div.MuiPaper-root\";\n\nexport const contextMenuContainsTargetNode = (state: any, event: Event) => {\n\tconst menuRef = getContextMenuRef(state).current;\n\n\t// the nested items are rendered under a different menu\n\t// the current api does not allow access\n\t// so the qa-refs refer to the Q-button\n\t// we check the click against his parent,\n\t// which is the div that contains the Q and A buttons\n\tconst qaRefs = getContextMenuQARefs(state)\n\t\t.map((refObject) => refObject.current)\n\t\t.filter((cur) => !!cur)\n\t\t.map((ref) => ref.parentNode);\n\n\tconst target = event.target as Node;\n\n\tif (menuRef?.querySelector(baseContextMenuSelector)?.contains(target)) return true;\n\n\tfor (const qaRef of qaRefs) {\n\t\tif (qaRef.contains(target)) return true;\n\t}\n\n\treturn false;\n};\n","import * as actions from \"./actions\";\nimport * as constants from \"./constants\";\nimport * as actionTypes from \"./actionTypes\";\nimport reducer from \"./reducer\";\nimport * as selectors from \"./selectors\";\nimport * as components from \"./components\";\nimport * as utils from \"./utils\";\n\nexport default { actions, actionTypes, constants, components, reducer, selectors, utils };\n","import { Dispatch } from \"redux\";\nimport focus from \"../../focus\";\nimport display from \"../../display\";\nimport select from \"../../select\";\nimport creation from \"../../creation\";\nimport { UserFocus } from \"../../focus/model\";\n\ntype KeyActionMap = { [key: string]: any };\n\ntype KeyEventDispatcher = (event: KeyboardEvent, dispatch: any, state?: any) => void;\n\nconst keyEventDispatcher = (keyMap: KeyActionMap) => (event: KeyboardEvent, dispatch: any) => {\n\tconst action = keyMap[event.key];\n\tif (action) {\n\t\tevent.preventDefault();\n\t\tdispatch(action);\n\t}\n};\n\nconst pageControlKeyMap: KeyActionMap = {\n\tArrowLeft: display.actions.previousPage(),\n\tArrowRight: display.actions.nextPage(),\n};\n\nconst sectionControlKeyMap: KeyActionMap = {\n\tArrowDown: select.actions.updateSection(\"DOWN\"),\n\tArrowUp: select.actions.updateSection(\"UP\"),\n\t\" \": select.actions.toggleSectionMovementState(),\n};\n\nconst selectionControlKeyMap: KeyActionMap = {\n\ta: select.actions.updateSelection(\"PLUS_WORD\"),\n\td: select.actions.updateSelection(\"MINUS_WORD\"),\n\tw: select.actions.updateSelection(\"PLUS_SPAN\"),\n\ts: select.actions.updateSelection(\"MINUS_SPAN\"),\n};\n\nconst contextMenuControlKeyMap: KeyActionMap = {\n\tt: creation.actions.toggleContextMenu(),\n};\n\nconst selectionFocusSectionKeyMap = {\n\t...pageControlKeyMap,\n\t...contextMenuControlKeyMap,\n\t...sectionControlKeyMap,\n\t...selectionControlKeyMap,\n};\nconst selectionFocusSectionDispatcher = keyEventDispatcher(selectionFocusSectionKeyMap);\n\nconst selectionFocusMouseKeyMap = {\n\t...pageControlKeyMap,\n\t...contextMenuControlKeyMap,\n};\nconst selectionFocusMouseDispatcher = keyEventDispatcher(selectionFocusMouseKeyMap);\n\nconst selectionFocusDispatcher: KeyEventDispatcher = (event, dispatch, state) => {\n\tif (select.selectors.selectionTypeIsSection(state)) {\n\t\tselectionFocusSectionDispatcher(event, dispatch);\n\t} else {\n\t\tselectionFocusMouseDispatcher(event, dispatch);\n\t}\n};\n\nconst contextMenuFocusKeyMap = { ...contextMenuControlKeyMap };\nconst contextMenuFocusDispatcher = keyEventDispatcher(contextMenuFocusKeyMap);\n\nconst focusDispatcherMap: { [focus in UserFocus]: KeyEventDispatcher } = {\n\tSELECTION: selectionFocusDispatcher,\n\tCONTEXT_MENU: contextMenuFocusDispatcher,\n\tEDITOR: (event, dispatch) => {},\n\tCONTROL: (event, dispatch) => {},\n};\n\nexport const keyDownControl = (event: KeyboardEvent) => {\n\treturn (dispatch: Dispatch | any, getState: Function) => {\n\t\tconst state = getState();\n\t\tconst userFocus = focus.selectors.getFocus(state);\n\t\tconst dispatcher = focusDispatcherMap[userFocus];\n\n\t\tdispatcher(event, dispatch, state);\n\t};\n};\n","import { connect } from \"react-redux\";\nimport { useEventListener } from \"../hooks/useEventListener\";\nimport { keyDownControl } from \"../services/keyboardControl\";\nimport { mouseDownControl, mouseUpControl } from \"../services/mouseControl\";\n\nfunction Control({\n\tkeyDownControl,\n\tmouseDownControl,\n\tmouseUpControl,\n}: {\n\tkeyDownControl: (event: KeyboardEvent) => void;\n\tmouseDownControl: (event: MouseEvent) => void;\n\tmouseUpControl: (event: MouseEvent) => void;\n}) {\n\tuseEventListener(\"keydown\", keyDownControl);\n\tuseEventListener(\"mousedown\", mouseDownControl);\n\tuseEventListener(\"mouseup\", mouseUpControl);\n\treturn null;\n}\n\nexport const ControlContainer = connect(\n\t() => {\n\t\treturn {};\n\t},\n\t{\n\t\tkeyDownControl,\n\t\tmouseDownControl,\n\t\tmouseUpControl,\n\t}\n)(Control);\n","import creation from \"../../creation\";\nimport select from \"../../select\";\nimport focus from \"../../focus\";\n\nexport const mouseDownControl = (event: MouseEvent) => {\n\treturn (dispatch: any, getState: Function) => {\n\t\tconst state = getState();\n\t\tconst contextMenuState = creation.selectors.getContextMenuState(state);\n\t\tif (contextMenuState) {\n\t\t\tconst clickOutSideOfMenu = !creation.utils.contextMenuContainsTargetNode(state, event);\n\n\t\t\tif (clickOutSideOfMenu) {\n\t\t\t\tdispatch(creation.actions.closeContextMenu());\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport const mouseUpControl = (_: any) => {\n\treturn (dispatch: any, getState: Function) => {\n\t\tconst selection = document.getSelection();\n\t\tif (selection) {\n\t\t\tconst selectedStr = selection.toString();\n\t\t\tif (selectedStr !== \"\") {\n\t\t\t\tconst state = getState();\n\t\t\t\tconst userFocus = focus.selectors.getFocus(state);\n\t\t\t\tconsole.log(selectedStr, userFocus);\n\t\t\t\tif (userFocus === \"SELECTION\" || userFocus === \"EDITOR\") {\n\t\t\t\t\tdispatch(select.actions.updateManuallySelectedString(selectedStr));\n\t\t\t\t\tdispatch(creation.actions.openContextMenu());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n","import display from \"../../display\";\nimport river from \"../../river\";\nimport React from \"react\";\nimport { AppBar, Toolbar } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport select from \"../../select\";\n\nexport const ControlBar = () => {\n\tconst totalPages = useSelector(display.selectors.getTotalPages);\n\n\treturn (\n\t\t<AppBar position=\"static\">\n\t\t\t<Toolbar variant=\"dense\">\n\t\t\t\t<river.components.ShowRiverButton></river.components.ShowRiverButton>\n\t\t\t\t{totalPages && <display.components.PageChooser></display.components.PageChooser>}\n\t\t\t\t{totalPages && <display.components.PreviousButton></display.components.PreviousButton>}\n\t\t\t\t{totalPages && <display.components.NextButton></display.components.NextButton>}\n\t\t\t\t{totalPages && <display.components.ShowMaterialButton></display.components.ShowMaterialButton>}\n\t\t\t\t{totalPages && <select.components.SelectionTypeButton></select.components.SelectionTypeButton>}\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n};\n","import * as components from \"./components\";\n\nexport default { components };\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withSize } from \"react-sizeme\";\nimport Paper from \"@material-ui/core/Paper\";\nimport select from \"../modules/select\";\nimport display from \"../modules/display\";\nimport control from \"../modules/control\";\nimport river from \"../modules/river\";\nimport creation from \"../modules/creation\";\nimport focus from \"../modules/focus\";\nimport { Divider } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst ReaderSceneRiverColumn = () => {\n\treturn (\n\t\t<Grid\n\t\t\titem\n\t\t\tstyle={{\n\t\t\t\twidth: \"38%\",\n\t\t\t}}\n\t\t>\n\t\t\t<Paper elevation={3}>\n\t\t\t\t<river.components.CardRiver></river.components.CardRiver>\n\t\t\t</Paper>\n\t\t</Grid>\n\t);\n};\n\nfunction ReaderSceneMaterialColumn({ size }: any) {\n\tconst dispatch = useDispatch();\n\n\tconst [elevation, setElevation] = useState(3);\n\n\treturn (\n\t\t<Grid\n\t\t\titem\n\t\t\tstyle={{\n\t\t\t\twidth: \"60%\",\n\t\t\t}}\n\t\t\tonMouseEnter={() => {\n\t\t\t\tdispatch(focus.actions.tryUpdateFocus(\"SELECTION\"));\n\t\t\t\tsetElevation(20);\n\t\t\t}}\n\t\t\tonMouseLeave={() => {\n\t\t\t\tsetElevation(3);\n\t\t\t}}\n\t\t>\n\t\t\t<Paper elevation={elevation}>\n\t\t\t\t<Divider></Divider>\n\t\t\t\t<select.components.DocumentCanvasContainer parentSize={size}></select.components.DocumentCanvasContainer>\n\t\t\t\t<display.components.PDFDocumentContainer parentSize={size}></display.components.PDFDocumentContainer>\n\t\t\t\t<display.components.PDFUploadContainer></display.components.PDFUploadContainer>\n\t\t\t</Paper>\n\t\t</Grid>\n\t);\n}\n\nconst ReaderSceneMaterialColumnWithSize = withSize({ monitorHeight: true, noPlaceholder: true })(\n\tReaderSceneMaterialColumn\n);\n\nexport function ReaderScene() {\n\tconst dispatch = useDispatch();\n\n\t// TODO: use memoize to make re-showing of pdf faster, this is wasteful right now\n\tconst showMaterial = useSelector(display.selectors.displayStatusIsShow);\n\tconst showRiver = useSelector(river.selectors.riverShowStateIsShow);\n\treturn (\n\t\t<div>\n\t\t\t<control.components.ControlContainer></control.components.ControlContainer>\n\t\t\t<Grid container justify=\"center\" direction=\"column\" alignItems=\"stretch\" spacing={1}>\n\t\t\t\t<Grid\n\t\t\t\t\titem\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tdispatch(focus.actions.tryUpdateFocus(\"CONTROL\"));\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<control.components.ControlBar></control.components.ControlBar>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid\n\t\t\t\t\titem\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tdispatch(focus.actions.tryUpdateFocus(\"EDITOR\"));\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Grid container justify=\"space-around\" direction=\"row\" alignItems=\"stretch\">\n\t\t\t\t\t\t{showRiver && <ReaderSceneRiverColumn></ReaderSceneRiverColumn>}\n\t\t\t\t\t\t{showMaterial && <ReaderSceneMaterialColumnWithSize></ReaderSceneMaterialColumnWithSize>}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<creation.components.ContextMenuContainer></creation.components.ContextMenuContainer>\n\t\t</div>\n\t);\n}\n","import { createStore } from \"redux\";\nimport { applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\nimport focus from \"./modules/focus\";\nimport creation from \"./modules/creation\";\nimport river from \"./modules/river\";\nimport analyze from \"./modules/analyze\";\nimport display from \"./modules/display\";\nimport select from \"./modules/select\";\nimport cards from \"./modules/cards\";\n\nconst rootReducer = combineReducers({\n\t[focus.constants.NAME]: focus.reducer,\n\t[creation.constants.NAME]: creation.reducer,\n\t[river.constants.NAME]: river.reducer,\n\t[analyze.constants.NAME]: analyze.reducer,\n\t[display.constants.NAME]: display.reducer,\n\t[select.constants.NAME]: select.reducer,\n\t[cards.constants.NAME]: cards.reducer,\n});\n\nconst stateSanitizer = (state: any) => {\n\tlet newState = state.displayData.pdf\n\t\t? { ...state, displayData: { ...state.displayData, pdf: \"PDF_FILE_IS_HERE\" } }\n\t\t: state;\n\treturn newState.materialData\n\t\t? {\n\t\t\t\t...newState,\n\t\t\t\tmaterialData: \"MATERIAL_DATA_IS_HERE\",\n\t\t  }\n\t\t: newState;\n};\n\nconst composeEnhancers = composeWithDevTools({ stateSanitizer });\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nexport const store = createStore(rootReducer, enhancer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ReaderScene } from \"./scenes/ReaderScene\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<ReaderScene></ReaderScene>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 73;"],"sourceRoot":""}